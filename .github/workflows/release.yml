name: release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g., v0.1.0). If omitted, uses the current ref."
        required: false

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-release:
    name: release (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: hyperfetch-x86_64-unknown-linux-gnu.tar.gz
            bin_path: target/release/hyperfetch
          - os: windows-latest
            artifact_name: hyperfetch-x86_64-pc-windows-msvc.zip
            bin_path: target/release/hyperfetch.exe

    steps:
      - name: Resolve tag/ref
        id: vars
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -z "${{ github.event.inputs.tag }}" ]; then
              echo "::error::No tag provided. Enter a tag like v0.1.1 when running manually." && exit 1
            fi
            echo "release_tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
            echo "checkout_ref=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            # For tag pushes, use the pushed tag/ref
            echo "release_tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "checkout_ref=${{ github.ref }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.vars.outputs.checkout_ref }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Build release
        run: cargo build --release

      - name: Package artifact (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          chmod +x target/release/hyperfetch
          if command -v strip >/dev/null 2>&1; then strip target/release/hyperfetch || true; fi
          tar -czf "${{ matrix.artifact_name }}" -C target/release hyperfetch

      - name: Package artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Compress-Archive -Path 'target/release/hyperfetch.exe' -DestinationPath '${{ matrix.artifact_name }}' -Force

      - name: Create or update GitHub Release and upload asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.release_tag }}
          files: |
            ${{ matrix.artifact_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
